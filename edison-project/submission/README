Zhehao Wang
404380075
zhehao@cs.ucla.edu

* Lab4-B-1

The heart rate is sent to server in plain text, and received from server in plain text. 
Security implication's that if someone's sniffing the network, he'll be able to see the plain text message and know another person's heart rate.

* Lab4-B-2

Output of the sniffer contains the UDP payload, which can de directly decoded from its network encoding into plain text, thus exposing user's (IP address, health rate data) to anyone sniffing the network.

* Lab4-B-3

Executed "./set_rate 5" (plain text to UDP port 8000).
UDP server replied with 1 heart rate update message (appended to the heart rate echo response). 
Whereas output before has interval of 3, output afterwards has interval of 5. In each while loop, the client now sleeps 2 more seconds than before. 
The heart rate values in later sent and received messages still match.

* Lab4-B-4

Rate is "maliciously" changed to 15 (by malicious, we meant that set by a different program that issues the same valid command).
Whereas output before has interval of 5, output afterwards has interval of 15.

* Lab4-D-1

The messages before encryption and after decryption still match: same heart rate value from each pair of send and receive in the while loop.
What's sent in the network is symmetrically encrypted.

* Lab4-D-2

The sniffer captures packets in the network, which are symmetrically encrypted, unlike in B which are plain text bytes. In D the content can no longer be just decoded into plain text showing user heart rate.

* Lab4-D-3

Executed "./set_rate 1" (TLS encrypted text to TCP 5000).
UDP server replied with 2 heart rate update message (appended to the heart rate response of the same heart rate message client sent). 
Because of the 1 extra response, the heart rate values in later sent and received messages no longer match since in each while loop we do one send and on receive. "ssl_read" is behind by 1 message.
Whereas output before has interval of 3, output afterwards has interval of 1. In each while loop, the client now sleeps 2 less seconds than before. 

* Lab4-D-4

Rate remains unchanged after attack script's executed.
The attack script sends plain text message "set rate 15" to host:UDP port 5000. And the server does not act according to this set rate. 
(Minor detail: this could be that server tries decrypt and gets rubbish, or that server doesn't have anything listening on UDP port 5000 at all, or whatever other server side logic).

* Lab4-E

Executed "./set_rate 1".
UDP server has the same reply as Lab4-D-3, but the messages after "set rate" still have matching sent and received heart rate values.
This is because the "only one pair of send and receive in each loop logic" is no longer there. Because of having two threads, client sends whenever the interval expires, and receives whenever there is something to receive; thus the client's no longer behind, after the extra response.
As shown in log, when setting rate, client no longer has a "sending message" log entry before the 2nd "set rate" response from the server.

* Log file format

The log has default name "tls.log", and logs client IP address, TLS connection response, each messages sent and received. These all have the same format as the strings in the printf of the original code.
Log gets overwritten per execution.

* Description of received messages

In updated tls_client, we receive encrypted heart rate echo, or encrypted heart rate echo with new interval. 
Server sends 1 of former for each client heart rate report, and 2 of latter (appended to the next heart rate echo response) for each valid set rate command.